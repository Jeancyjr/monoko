version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: monoko-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-monoko123}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-monoko}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
    networks:
      - monoko-network

  # Redis for Caching and Sessions
  redis:
    image: redis:7.2-alpine
    container_name: monoko-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-monoko123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monoko-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: monoko-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-monoko123}@mongodb:27017/${MONGO_DB_NAME:-monoko}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-monoko123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRE: ${JWT_EXPIRE:-7d}
      # AI Services (configure in production)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_VISION_API_KEY: ${GOOGLE_VISION_API_KEY}
      AZURE_SPEECH_API_KEY: ${AZURE_SPEECH_API_KEY}
      # Storage
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME:-monoko-content}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      # Email
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@monoko.app}
    ports:
      - "3000:3000"
    volumes:
      - ./content:/app/content:ro
      - uploads_data:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - monoko-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: monoko-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - uploads_data:/var/www/uploads:ro
    depends_on:
      - backend
    networks:
      - monoko-network

  # SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: monoko-certbot
    restart: "no"
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: monoko-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monoko-network

  grafana:
    image: grafana/grafana:latest
    container_name: monoko-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-monoko123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - monoko-network

# Development Override (docker-compose.override.yml)
  # Frontend Development Server (Expo)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: monoko-frontend-dev
    restart: unless-stopped
    environment:
      EXPO_DEVTOOLS_LISTEN_ADDRESS: 0.0.0.0
      REACT_NATIVE_PACKAGER_HOSTNAME: frontend-dev
    ports:
      - "19000:19000"  # Expo DevTools
      - "19001:19001"  # Expo Metro Bundler
      - "19002:19002"  # Expo Tunnel
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - expo_cache:/root/.expo
    networks:
      - monoko-network
    profiles:
      - development

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  expo_cache:
    driver: local

networks:
  monoko-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
